// <auto-generated />
using System;
using System.Data.SqlTypes;
using Restoraunt.Restoraunt.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Restoraunt.Restoraunt.DataAccess;

#nullable disable
namespace Restoraunt.DataAccess.Migrations
{
    [DbContext(typeof(RestorauntDbContext))]
    partial class RestorauntDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Restoraunt.Restoraunt.DataAccess.Admin", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("datetime2");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("ExternalId")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("ModificationTime")
                    .HasColumnType("datetime2");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("ExternalId")
                    .IsUnique();

                b.ToTable("admins");
            });

            modelBuilder.Entity("Restoraunt.Restoraunt.DataAccess.AdminRoleEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("AdminRoles", (string)null);
            });

            modelBuilder.Entity("Restoraunt.Restoraunt.DataAccess.Dish", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Category")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<SqlMoney>("Cost")
                    .HasColumnType("money");

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("datetime2");

                b.Property<Guid>("ExternalId")
                    .HasColumnType("uniqueidentifier");

                b.Property<object>("Image")
                    .HasColumnType("varbinary(max)");

                b.Property<DateTime>("ModificationTime")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("ExternalId")
                    .IsUnique();

                b.ToTable("dishes");
            });

            modelBuilder.Entity("Restoraunt.Restoraunt.DataAccess.FavoriteDish", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Category")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<SqlMoney>("Cost")
                    .HasColumnType("money");

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("datetime2");

                b.Property<string>("Descroption")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("ExternalId")
                    .HasColumnType("uniqueidentifier");

                b.Property<object>("Image")
                    .HasColumnType("varbinary(max)");

                b.Property<DateTime>("ModificationTime")
                    .HasColumnType("datetime2");

                b.Property<int>("IdUser")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("ExternalId")
                    .IsUnique();

                b.HasIndex("IdUser");

                b.ToTable("favorite-dishes");
            });

            modelBuilder.Entity("Restoraunt.Restoraunt.DataAccess.Menu", b =>
            {
                b.Property<int>("IdMenu")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMenu"));

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("datetime2");

                b.Property<int>("IdAdmin")
                    .HasColumnType("int");

                b.Property<int>("IdDish")
                    .HasColumnType("int");

                b.Property<DateTime>("ModificationTime")
                    .HasColumnType("datetime2");
                b.HasKey("IdMenu");

                b.HasIndex("IdAdmin");

                b.HasIndex("IdDish");

                b.ToTable("menus");
            });

            modelBuilder.Entity("Restoraunt.Restoraunt.DataAccess.Order", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("datetime2");

                b.Property<DateTime>("DateCreate")
                    .HasColumnType("datetime2");

                b.Property<string>("Details")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Heading")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("IdDish")
                    .HasColumnType("int");

                b.Property<int>("IdUser")
                    .HasColumnType("int");

                b.Property<DateTime>("ModificationTime")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("IdDish");

                b.HasIndex("IdUser");

                b.ToTable("orders");
            });

            modelBuilder.Entity("Restoraunt.Restoraunt.DataAccess.User", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("datetime2");

                b.Property<Guid>("ExternalId")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("ModificationTime")
                    .HasColumnType("datetime2");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("ExternalId")
                    .IsUnique();

                b.ToTable("users");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("Roles", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("RoleId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("UserClaims", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("UserClaims", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderKey")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("UserLogins", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
            {
                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.Property<int>("RoleId")
                    .HasColumnType("int");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("UserRoles", (string)null);
            });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
            {
                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("UserTokens", (string)null);
            });

            modelBuilder.Entity("Restoraunt.Restoraunt.DataAccess.Admin", b =>
            {
                b.OwnsMany("Restoraunt.Restoraunt.DataAccess.Menu", "Menus", b1 =>
                {
                    b1.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreationTime")
                                .HasColumnType("datetime2");

                            b1.Property<int>("IdAdmin")
                                .HasColumnType("int");

                            b1.Property<int>("IdDish")
                                .HasColumnType("int");

                            b1.Property<DateTime>("ModificationTime")
                                .HasColumnType("datetime2");

                            b1.HasKey("Id");

                            b1.HasIndex("IdAdmin");

                            b1.HasIndex("IdDish");

                            b1.ToTable("Menus", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("IdAdmin");

                            b1.HasOne("Restoraunt.Restoraunt.DataAccess.Dish", "_Dish")
                                .WithMany("Menus")
                                .HasForeignKey("IdDish")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("Menus");
                });

            modelBuilder.Entity("Restoraunt.Restoraunt.DataAccess.FavoriteDish", b =>
                {
                    b.HasOne("Restoraunt.Restoraunt.DataAccess.User", "_User")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Restoraunt.Restoraunt.DataAccess.Menu", b =>
                {
                    b.HasOne("Restoraunt.Restoraunt.DataAccess.Admin", null)
                        .WithMany()
                        .HasForeignKey("IdAdmin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restoraunt.Restoraunt.DataAccess.Dish", "_Dish")
                        .WithMany("Menus")
                        .HasForeignKey("IdDish")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Restoraunt.Restoraunt.DataAccess.Order", b =>
                {
                    b.HasOne("Restoraunt.Restoraunt.DataAccess.Dish", "_Dish")
                        .WithMany("Orders")
                        .HasForeignKey("IdDish")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restoraunt.Restoraunt.DataAccess.User", "_User")
                        .WithMany("Orders")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Restoraunt.Restoraunt.DataAccess.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
            {
                b.HasOne("Restoraunt.Restoraunt.DataAccess.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Restoraunt.Restoraunt.DataAccess.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
            {
                b.HasOne("Restoraunt.Restoraunt.DataAccess.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Restoraunt.Restoraunt.DataAccess.Dish", b =>
            {
                b.Navigation("Menus");

                b.Navigation("Orders");
            });

            modelBuilder.Entity("Restoraunt.Restoraunt.DataAccess.User", b =>
            {
                b.Navigation("FavoriteDishes");

                b.Navigation("Orders");
            });
#pragma warning restore 612, 618
        }
    }
            
    }